// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_wallpaper_bloc/models/collections/collection_entity.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }
  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
		final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type ==  "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type ==  "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  } 
	//Go back to a single instance by type
	static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
		final String type = M.toString();
		if(type == (CollectionEntity).toString()){
			return CollectionEntity.fromJson(json) as M;
		}
		if(type == (CollectionCoverPhoto).toString()){
			return CollectionCoverPhoto.fromJson(json) as M;
		}
		if(type == (CollectionCoverPhotoUser).toString()){
			return CollectionCoverPhotoUser.fromJson(json) as M;
		}
		if(type == (CollectionCoverPhotoUserProfileImage).toString()){
			return CollectionCoverPhotoUserProfileImage.fromJson(json) as M;
		}
		if(type == (CollectionCoverPhotoUserLinks).toString()){
			return CollectionCoverPhotoUserLinks.fromJson(json) as M;
		}
		if(type == (CollectionCoverPhotoUrls).toString()){
			return CollectionCoverPhotoUrls.fromJson(json) as M;
		}
		if(type == (CollectionCoverPhotoLinks).toString()){
			return CollectionCoverPhotoLinks.fromJson(json) as M;
		}
		if(type == (CollectionUser).toString()){
			return CollectionUser.fromJson(json) as M;
		}
		if(type == (CollectionUserProfileImage).toString()){
			return CollectionUserProfileImage.fromJson(json) as M;
		}
		if(type == (CollectionUserLinks).toString()){
			return CollectionUserLinks.fromJson(json) as M;
		}
		if(type == (CollectionLinks).toString()){
			return CollectionLinks.fromJson(json) as M;
		}

		print("$type not found");
	
		return null;
}

  //list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<CollectionEntity>[] is M){
			return data.map<CollectionEntity>((Map<String, dynamic> e) => CollectionEntity.fromJson(e)).toList() as M;
		}
		if(<CollectionCoverPhoto>[] is M){
			return data.map<CollectionCoverPhoto>((Map<String, dynamic> e) => CollectionCoverPhoto.fromJson(e)).toList() as M;
		}
		if(<CollectionCoverPhotoUser>[] is M){
			return data.map<CollectionCoverPhotoUser>((Map<String, dynamic> e) => CollectionCoverPhotoUser.fromJson(e)).toList() as M;
		}
		if(<CollectionCoverPhotoUserProfileImage>[] is M){
			return data.map<CollectionCoverPhotoUserProfileImage>((Map<String, dynamic> e) => CollectionCoverPhotoUserProfileImage.fromJson(e)).toList() as M;
		}
		if(<CollectionCoverPhotoUserLinks>[] is M){
			return data.map<CollectionCoverPhotoUserLinks>((Map<String, dynamic> e) => CollectionCoverPhotoUserLinks.fromJson(e)).toList() as M;
		}
		if(<CollectionCoverPhotoUrls>[] is M){
			return data.map<CollectionCoverPhotoUrls>((Map<String, dynamic> e) => CollectionCoverPhotoUrls.fromJson(e)).toList() as M;
		}
		if(<CollectionCoverPhotoLinks>[] is M){
			return data.map<CollectionCoverPhotoLinks>((Map<String, dynamic> e) => CollectionCoverPhotoLinks.fromJson(e)).toList() as M;
		}
		if(<CollectionUser>[] is M){
			return data.map<CollectionUser>((Map<String, dynamic> e) => CollectionUser.fromJson(e)).toList() as M;
		}
		if(<CollectionUserProfileImage>[] is M){
			return data.map<CollectionUserProfileImage>((Map<String, dynamic> e) => CollectionUserProfileImage.fromJson(e)).toList() as M;
		}
		if(<CollectionUserLinks>[] is M){
			return data.map<CollectionUserLinks>((Map<String, dynamic> e) => CollectionUserLinks.fromJson(e)).toList() as M;
		}
		if(<CollectionLinks>[] is M){
			return data.map<CollectionLinks>((Map<String, dynamic> e) => CollectionLinks.fromJson(e)).toList() as M;
		}

		print("${M.toString()} not found");
	
		return null;
}

  static M? fromJsonAsT<M>(dynamic json) {
		if(json == null){
			return null;
		}		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return _fromJsonSingle<M>(json as Map<String, dynamic>);
		}
	}
}